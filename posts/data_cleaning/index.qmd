---
title: "Data Cleaning"
author: "Group 9"
date: "2023-04-05"
date-modified: "`r Sys.Date()`"
categories: [news]
---

# R Packages

```{r}
pacman::p_load(readr, sf, tmap, spatstat, sfdep, tidyverse, maptools, raster)
```

# Import Data

## Aspatial Data

### General Practitioner Clinics

::: {.panel-tabset}
#### Code

```{r}
gp_data <- read_csv("data/aspatial/gp_data_geocoded.csv")[,-1]
```

#### Data

```{r}
head(gp_data, 5)
```
:::

### Hospitals

::: {.panel-tabset}
#### Code

```{r}
hospital_data <- read_csv("data/aspatial/hospital_data_geocoded.csv")
```

#### Data

```{r}
head(hospital_data, 5)
```

:::

### Polyclinics

::: {.panel-tabset}
#### Code

```{r}
poly_data <- read_csv("data/aspatial/polyclinic_data_geocoded.csv")
```

#### Data

```{r}
head(poly_data, 5)
```

:::

### Nursing Homes

::: {.panel-tabset}
#### Code

```{r}
nursing_data <- read_csv("data/aspatial/nursing_home_data_geocoded.csv")
```

#### Data

```{r}
head(nursing_data, 5)
```

:::

### Resident Population by Planning Area/Subzone, Age Group and Sex

Only total population, not separated by genders

::: {.panel-tabset}
#### Code

```{r}
pop_data <- read_csv("data/aspatial/Resident Population 2015.csv", skip=11)[1:379,1:19]
```

#### Data

```{r}
head(pop_data, 5)
```
:::



## Geospatial Data

### Master Plan Subzone 2019

::: {.panel-tabset}
#### Code

```{r}
mpsz <- st_read(dsn = "data/geospatial/MPSZ-2019", 
                            layer = "MPSZ-2019") %>% 
  st_transform(crs = 3414)
```

#### Data

```{r}
head(mpsz, 5)
```
:::

### Locations of Bus Stops

::: {.panel-tabset}
#### Code

```{r}
busstop_sf <- st_read(dsn = "data/geospatial/BusStop_Feb2023", 
                            layer = "BusStop") %>% 
  st_transform(crs = 3414)
```

#### Data

```{r}
head(busstop_sf, 5)
```
:::

### Locations of Train Stations

::: {.panel-tabset}
#### Code

```{r}
trainstation_sf <- st_read(dsn = "data/geospatial/TrainStation_Feb2023", 
                            layer = "RapidTransitSystemStation")[,c(-1, -2)] %>% 
  st_transform(crs = 3414)
```

#### Data

```{r}
head(trainstation_sf, 5)
```
:::







# Data Preparation
## Retrieve Geospatial Data

### General Practitioner Clinics

::: {.panel-tabset}
#### Code

```{r}
gp_sf <- st_as_sf(gp_data, coords=c("Long", "Lat"), crs=4326) %>% st_transform(crs = 3414)
```

#### Data
```{r}
head(gp_sf, 5)
```
:::

### Hospitals

::: {.panel-tabset}
#### Code

```{r}
hospital_sf <- st_as_sf(hospital_data, coords=c("Long", "Lat"), crs=4326) %>% st_transform(crs = 3414)
```

#### Data
```{r}
head(hospital_sf, 5)
```
:::


### Polyclinics

::: {.panel-tabset}
#### Code

```{r}
poly_sf <- st_as_sf(poly_data, coords=c("Long", "Lat"), crs=4326) %>% st_transform(crs = 3414)
```

#### Data
```{r}
head(poly_sf, 5)
```
:::

### Nursing Homes

::: {.panel-tabset}
#### Code

```{r}
nursing_sf <- st_as_sf(nursing_data, coords=c("Long", "Lat"), crs=4326) %>% st_transform(crs = 3414)
```

#### Data
```{r}
head(nursing_sf, 5)
```
:::




## Merge MPSZ with Population Data

### Convert Data Types
```{r}
pop_is_char <- sapply(pop_data[c(2:19)], is.character)
pop_data[c(2:19)][ , pop_is_char] <- as.data.frame(apply(pop_data[c(2:19)][ , pop_is_char], 2, as.numeric))
```

### Total Population

```{r}
pop_data$...1  = toupper(pop_data$...1)

total_pop <- merge(x = mpsz, y = pop_data, by.x = "SUBZONE_N", by.y = "...1", all.x = TRUE)
```


## Validity of Geometries of Train Stations
```{r}
length(which(st_is_valid(trainstation_sf) == FALSE))
```

make valid cannot do


```{r}
trainstation_sf <- trainstation_sf[st_is_valid(trainstation_sf) == TRUE,]
trainstation_sf <- trainstation_sf[!st_is_empty(trainstation_sf),,drop=FALSE]
length(which(st_is_valid(trainstation_sf) == FALSE))

```


## Excluding Unnecessary Data Points
```{r}
gp_sf <- st_intersection(mpsz, gp_sf)
hospital_sf <- st_intersection(mpsz, hospital_sf)
poly_sf <- st_intersection(mpsz, poly_sf)
nursing_sf <- st_intersection(mpsz, nursing_sf)
busstop_sf <- st_intersection(mpsz, busstop_sf)
trainstation_sf <- st_intersection(mpsz, trainstation_sf)
```



# Data Visualisation

## General Practitioner Clinics

```{r}
tmap_mode("plot")
tm_shape(total_pop) +
  tm_polygons(
    "Total...2",
    style = "cont",
    alpha = 0.4) +
  tm_fill() + 
tm_shape(gp_sf) + 
  tm_symbols(shape=24,
    col  = "blue",
    size = 0.15) +
  tm_layout(main.title="General Practitioner Clinics",
            main.title.position = "center")
```

## Hospitals

```{r}
general_hospital = hospital_sf[hospital_sf$TYPE == "GENERAL",]
specialised_hospital = hospital_sf[hospital_sf$TYPE == "SPECIALISED",]
community_hospital = hospital_sf[hospital_sf$TYPE == "COMMUNITY",]


tm_shape(total_pop) +
  tm_polygons(
    "Total...2",
    style = "cont",
    alpha = 0.4) +
tm_shape(general_hospital) + 
  tm_symbols(
    shape=23,
    col  = "red",
    size = 0.15) +
tm_shape(specialised_hospital) + 
  tm_symbols(
    shape=23,
    col  = "blue",
    size = 0.15) +
tm_shape(community_hospital) + 
  tm_symbols(
    shape=23,
    col  = "green",
    size = 0.15) +
  tm_layout(main.title="Hospitals",
            main.title.position = "center")
```



## Polyclinics

```{r}
tmap_mode("plot")
tm_shape(total_pop) +
  tm_polygons(
    "Total...2",
    style = "cont",
    alpha = 0.4) +
tm_shape(poly_sf) + 
  tm_symbols(shape=22,
    col  = "orange",
    size = 0.15) +
  tm_layout(main.title="Polyclinics",
            main.title.position = "center")
```




## Nursing Homes

```{r}
tmap_mode("plot")
tm_shape(total_pop) +
  tm_polygons(
    "Total...2",
    style = "cont",
    alpha = 0.4) +
tm_shape(nursing_sf) + 
  tm_symbols(shape=21,
    col  = "green",
    size = 0.15) +
  tm_layout(main.title="Nursing Homes",
            main.title.position = "center")
```



## Bus Stops

```{r}
tmap_mode("plot")
tm_shape(total_pop) +
  tm_polygons(
    "Total...2",
    style = "cont",
    alpha = 0.4) +
tm_shape(busstop_sf) + 
  tm_symbols(shape=20,
    col  = "darkblue",
    size = 0.15) +
  tm_layout(main.title="Bus Stops",
            main.title.position = "center")
```



## MRT Stations

```{r}
mrt <- trainstation_sf[trainstation_sf$TYP_CD_DES == "MRT",]
lrt <- trainstation_sf[trainstation_sf$TYP_CD_DES == "LRT",]

tmap_mode("plot")
tm_shape(total_pop) +
  tm_polygons(
    "Total...2",
    style = "cont",
    alpha = 0.4) +
tm_shape(mrt) + 
  tm_symbols(shape=20,
    col  = "green",
    size = 0.15) +
tm_shape(lrt) + 
  tm_symbols(shape=20,
    col  = "darkgreen",
    size = 0.15) +
  tm_layout(main.title="Train Stations",
            main.title.position = "center")
```



# First-order Spatial Point Patterns Analysis
```{r echo=FALSE}
pacman::p_load(DiagrammeR)
grViz(diagram = "digraph flowchart {
  graph [layout = dot, rankdir = LR]
  node [fontname = arial, shape = oval]
  tab1 [label = '@@1']
  tab2 [label = '@@2']
  tab3 [label = '@@3']
  tab4 [label = '@@4']
  
  tab1 -> tab2 -> tab3 -> tab4;
}
  
  [1]: 'simple feature'
  [2]: 'spatial*'    
  [3]: 'generic spatial'   
  [4]: 'ppp'  
  ")
```

## Conversion of Datatypes

idk why train stations converts into spatial polygon

### Converting *sf* data frames to sp’s *Spatial** class
```{r}
mpsz_spatial <- as_Spatial(mpsz)
gp_spatial <- as_Spatial(gp_sf)
hospital_spatial <- as_Spatial(hospital_sf)
poly_spatial <- as_Spatial(poly_sf)
nursing_spatial <- as_Spatial(nursing_sf)
busstop_spatial <- as_Spatial(busstop_sf)
trainstation_spatial <- as_Spatial(trainstation_sf)
```

### Converting sp’s *Spatial** Class into Generic *sp* Format
```{r}
mpsz_sp <- as(mpsz_spatial, "SpatialPolygons")
gp_sp <- as(gp_spatial, "SpatialPoints")
hospital_sp <- as(hospital_spatial, "SpatialPoints")
poly_sp <- as(poly_spatial, "SpatialPoints")
nursing_sp <- as(nursing_spatial, "SpatialPoints")
busstop_sp <- as(busstop_spatial, "SpatialPoints")
trainstation_sp <- as(trainstation_spatial, "SpatialPolygons")
```

### Converting Generic *sp* Format into spatstat’s *ppp* Format
```{r}
gp_ppp <- as(gp_sp, "ppp")
hospital_ppp <- as(hospital_sp, "ppp")
poly_ppp <- as(poly_sp, "ppp")
nursing_ppp <- as(nursing_sp, "ppp")
busstop_ppp <- as(busstop_sp, "ppp")
```

### Data Visualisation

::: {.panel-tabset}

#### Master Plan Subzone 2019

```{r}
plot(mpsz_spatial, main="General Practitioner Clinics")
```

#### General Practitioner Clinics
```{r}
plot(gp_ppp, main="General Practitioner Clinics")
```


#### Hospitals
```{r}
plot(hospital_ppp, main="Hospitals")
```


#### Polyclinics
```{r}
plot(poly_ppp, main="Polyclinics")
```

#### Nursing Homes
```{r}
plot(nursing_ppp, main="Nursing Homes")
```

#### Bus Stops
```{r}
plot(busstop_ppp, main="Bus Stops")
```


#### Mrt Stations
```{r}
plot(trainstation_spatial, main="Mrt Stations")
```
:::

## Check for Duplicate Data Points
```{r}
any(duplicated(gp_ppp))
```

```{r}
any(duplicated(hospital_ppp))
```
```{r}
any(duplicated(poly_ppp))
```

```{r}
any(duplicated(nursing_ppp))
```


```{r}
any(duplicated(busstop_ppp))
```

### Handle Duplicated Points
If we want to know how many locations have more than one point event, we can use the code chunk below.
```{r}
sum(multiplicity(gp_ppp) > 1)
```
```{r}
sum(multiplicity(nursing_ppp) > 1)
```


```{r}
sum(multiplicity(busstop_ppp) > 1)
```



The second solution is use jittering, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.

```{r}
gp_ppp_jit <- rjitter(gp_ppp,retry = TRUE,
                             nsim = 1, 
                             drop = TRUE)
any(duplicated(gp_ppp_jit))
```

```{r}
nursing_ppp_jit <- rjitter(nursing_ppp,retry = TRUE,
                             nsim = 1, 
                             drop = TRUE)
any(duplicated(nursing_ppp_jit))
```


```{r}
busstop_ppp_jit <- rjitter(busstop_ppp,retry = TRUE,
                             nsim = 1, 
                             drop = TRUE)
any(duplicated(busstop_ppp_jit))
```

## Creating *owin* Object
```{r}
mpsz_owin <- as(mpsz_sp, "owin")
gp_ppp = gp_ppp_jit[mpsz_owin]
hospital_ppp = hospital_ppp[mpsz_owin]
poly_ppp = poly_ppp[mpsz_owin]
nursing_ppp = nursing_ppp_jit[mpsz_owin]
busstop_ppp = busstop_ppp_jit[mpsz_owin]
mpsz_owin
```

## Kernel Density Estimation (KDE)

rescale
```{r}
gp_ppp.km <- rescale(gp_ppp, 1000, "km")
hospital_ppp.km <- rescale(hospital_ppp, 1000, "km")
poly_ppp.km <- rescale(poly_ppp, 1000, "km")
nursing_ppp.km <- rescale(nursing_ppp, 1000, "km")
busstop_ppp.km <- rescale(busstop_ppp, 1000, "km")
```

### General Practitioner Clinics
```{r}
gp_bw <- density(gp_ppp.km,
             sigma = bw.diggle,
             edge = TRUE,
             kernel = "gaussian")

plot(gp_bw, main = "General Practitioner Clinics")
```

### Hospitals
```{r}
hospital_bw <- density(hospital_ppp.km,
             sigma = bw.diggle,
             edge = TRUE,
             kernel = "gaussian")

plot(hospital_bw, main = "Hospitals")
```


### Polyclinics
```{r}
poly_bw <- density(poly_ppp.km,
             sigma = bw.diggle,
             edge = TRUE,
             kernel = "gaussian")

plot(poly_bw, main = "Polyclinics")
```

### Nursing Homes
```{r}
nursing_bw <- density(nursing_ppp.km,
             sigma = bw.diggle,
             edge = TRUE,
             kernel = "gaussian")

plot(nursing_bw, main = "Nursing Homes")
```

### Bus Stops
```{r}
busstop_bw <- density(busstop_ppp.km,
             sigma = bw.diggle,
             edge = TRUE,
             kernel = "gaussian")

plot(busstop_bw, main = "Bus Stops")
```


## Converting KDE Output into Grid Object
### General Practitioner Clinics
```{r}
gridded_gp_bw <- as.SpatialGridDataFrame.im(gp_bw)
spplot(gridded_gp_bw)
```


### Hospitals
```{r}
gridded_hospital_bw <- as.SpatialGridDataFrame.im(hospital_bw)
spplot(gridded_hospital_bw)
```


### Polyclinics
```{r}
gridded_poly_bw <- as.SpatialGridDataFrame.im(poly_bw)
spplot(gridded_poly_bw)
```

### Nursing Homes
```{r}
gridded_nursing_bw <- as.SpatialGridDataFrame.im(nursing_bw)
spplot(gridded_nursing_bw)
```

### Bus Stops
```{r}
gridded_busstop_bw <- as.SpatialGridDataFrame.im(busstop_bw)
spplot(gridded_busstop_bw)
```

## Converting Gridded Output into Raster

### General Practitioner Clinics

```{r}
kde_gp_bw_raster <- raster(gridded_gp_bw)
projection(kde_gp_bw_raster) <- CRS("+init=EPSG:3414")
kde_gp_bw_raster
```


### Hospitals

```{r}
kde_hospital_bw_raster <- raster(gridded_hospital_bw)
projection(kde_hospital_bw_raster) <- CRS("+init=EPSG:3414")
kde_hospital_bw_raster
```

### Polyclinics

```{r}
kde_poly_bw_raster <- raster(gridded_poly_bw)
projection(kde_poly_bw_raster) <- CRS("+init=EPSG:3414")
kde_poly_bw_raster
```

### Nursing Homes

```{r}
kde_nursing_bw_raster <- raster(gridded_nursing_bw)
projection(kde_nursing_bw_raster) <- CRS("+init=EPSG:3414")
kde_nursing_bw_raster
```

### Bus Stops

```{r}
kde_busstop_bw_raster <- raster(gridded_busstop_bw)
projection(kde_busstop_bw_raster) <- CRS("+init=EPSG:3414")
kde_busstop_bw_raster
```

### Visualisation

#### General Practitioner Clinics

```{r}
tm_shape(kde_gp_bw_raster) +
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```


#### Hospitals

```{r}
tm_shape(kde_hospital_bw_raster) +
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

#### Polyclinics

```{r}
tm_shape(kde_poly_bw_raster) +
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

#### Nursing Homes

```{r}
tm_shape(kde_nursing_bw_raster) +
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

#### Bus Stops

```{r}
tm_shape(kde_busstop_bw_raster) +
  tm_raster("v") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```


## Nearest Neighbour Analysis

### General Practitioner Clinics

- Ho = The distribution of general practitioner clinics are randomly distributed.

- H1 = The distribution of general practitioner clinics are not randomly distributed.

With the p-value lower than the alpha value of 0.05, we reject the null hypothesis and accept that general practitioner clinics are not randomly distributed.

```{r}
clarkevans.test(gp_ppp.km,
                correction = "none", 
                clipregion = "mpsz_owin", 
                alternative = c("clustered"), 
                nsim = 99)
```

### Hospitals

- Ho = The distribution of hospitals are randomly distributed.

- H1 = The distribution of hospitals are not randomly distributed.

With the p-value lower than the alpha value of 0.05, we reject the null hypothesis and accept that hospitals are not randomly distributed.

```{r}
clarkevans.test(hospital_ppp.km,
                correction = "none", 
                clipregion = "mpsz_owin", 
                alternative = c("clustered"), 
                nsim = 99)
```


### Polyclinics

- Ho = The distribution of polyclinics are randomly distributed.

- H1 = The distribution of polyclinics are not randomly distributed.

With the p-value above than the alpha value of 0.05, we accept the null hypothesis and accept that polyclinics are randomly distributed.

```{r}
clarkevans.test(poly_ppp.km,
                correction = "none", 
                clipregion = "mpsz_owin", 
                alternative = c("clustered"), 
                nsim = 99)
```

### Nursing Homes

- Ho = The distribution of nursing homes are randomly distributed.

- H1 = The distribution of nursing homes are not randomly distributed.

With the p-value lower than the alpha value of 0.05, we reject the null hypothesis and accept that nursing homes are not randomly distributed.

```{r}
clarkevans.test(nursing_ppp.km,
                correction = "none", 
                clipregion = "mpsz_owin", 
                alternative = c("clustered"), 
                nsim = 99)
```









