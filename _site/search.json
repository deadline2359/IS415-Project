[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Group 9",
    "section": "",
    "text": "Data Cleaning\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nApr 5, 2023\n\n\nGroup 9\n\n\n\n\n\n\n  \n\n\n\n\nProposal\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2023\n\n\nGroup 9\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/proposal/index.html",
    "href": "posts/proposal/index.html",
    "title": "Proposal",
    "section": "",
    "text": "More details will be added..\n\n\n\nAt the moment, we are still exploring available datasets. We update this page as time goes on.\n\n\n\nProblem\nThe number of heathcare facilities, ranging from private clinics to polyclinics to general hospitals, has been increasing over the years. No doubt, it will increase the availability and accessibility of hospitals for the public, or does it?\n\n\nMotivation\nAs Singapore’s population ages and overall population expands, we can foresee the increasing need of healthcare facilities in the future. Importantly, the aging population will face difficulties in travelling to the facilities.\nWe want to explore the relation between transportation and these facilities.\n\n\nDataset\n\nMaster Plan 2014 Subzone Boundary (Web) - SHP files of Singapore subzone boundaries\nResident Population by Planning Area/Subzone, Age Group and Sex, 2015 - CSV file\nSDCP MRT Station Point - SHP files\nBus Stop Location - SHP files\n\n\n\nRelevant Works\n\nAccess to Healthcare in Singapore (by Lim Ee Jean) - She crucially analysed the population in Singapore that can reach a hospital within certain time limits. This is similar to our project, however it lacks the interactivity and additional details that are required to further understand the relationships between transportation and medical institutions.\n\n\n\nSystem Architecture\n\n\n\n\n\n\n\nPrototypes\n\n\n\nProposal Page\n\n\n\n\n\nEDA\n\n\n\n\n\nAnalysis"
  },
  {
    "objectID": "posts/data_cleaning/index.html",
    "href": "posts/data_cleaning/index.html",
    "title": "Data Cleaning",
    "section": "",
    "text": "pacman::p_load(readr, sf, tmap, spatstat, sfdep, tidyverse, maptools, raster)"
  },
  {
    "objectID": "posts/data_cleaning/index.html#aspatial-data",
    "href": "posts/data_cleaning/index.html#aspatial-data",
    "title": "Data Cleaning",
    "section": "Aspatial Data",
    "text": "Aspatial Data\n\nGeneral Practitioner Clinics\n\nCodeData\n\n\n\ngp_data <- read_csv(\"data/aspatial/gp_data_geocoded.csv\")[,-1]\n\nRows: 1221 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): clinic, postal_code\ndbl (5): index, X, Y, Lat, Long\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nhead(gp_data, 5)\n\n# A tibble: 5 × 6\n  clinic                 postal_code      X      Y   Lat  Long\n  <chr>                  <chr>        <dbl>  <dbl> <dbl> <dbl>\n1 RafflesMedical         159953      24849. 30114.  1.29  104.\n2 Shenton Medical Group  119963      24433. 28496.  1.27  104.\n3 Town Hall Clinic       119967      24375. 28917.  1.28  104.\n4 Chuah Clinic & Surgery 380113      33881. 33643.  1.32  104.\n5 ECM Clinic & Surgery   387604      33518. 33021.  1.31  104.\n\n\n\n\n\n\n\nHospitals\n\nCodeData\n\n\n\nhospital_data <- read_csv(\"data/aspatial/hospital_data_geocoded.csv\")\n\nRows: 27 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): HOSPITAL_NAME, PRIVATE, TYPE, MANAGED_BY, ADDRESS, NUM_OF_BEDS\ndbl (5): POSTAL_CODE, X, Y, Lat, Long\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nhead(hospital_data, 5)\n\n# A tibble: 5 × 11\n  HOSPITAL_N…¹ PRIVATE TYPE  MANAG…² ADDRESS POSTA…³ NUM_O…⁴      X      Y   Lat\n  <chr>        <chr>   <chr> <chr>   <chr>     <dbl> <chr>    <dbl>  <dbl> <dbl>\n1 ALEXANDRA H… Y       GENE… <NA>    ALEXAN…  159964 176     24230. 30060.  1.29\n2 BRIGHT VISI… N       COMM… SINGHE… 5 LORO…  547530 317     32976. 39338.  1.37\n3 CHANGI GENE… N       GENE… SINGHE… 2 SIME…  529889 1,000   40784. 35942.  1.34\n4 CONCORD INT… Y       SPEC… <NA>    19 Ada…  289891 34      25774. 34337.  1.33\n5 FARRER PARK… Y       GENE… <NA>    1 Farr…  217562 121     30284. 32783.  1.31\n# … with 1 more variable: Long <dbl>, and abbreviated variable names\n#   ¹​HOSPITAL_NAME, ²​MANAGED_BY, ³​POSTAL_CODE, ⁴​NUM_OF_BEDS\n\n\n\n\n\n\n\nPolyclinics\n\nCodeData\n\n\n\npoly_data <- read_csv(\"data/aspatial/polyclinic_data_geocoded.csv\")\n\nRows: 20 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): POLYCLINIC, MANAGED_BY, ADDRESS\ndbl (5): POSTAL_CODE, X, Y, Lat, Long\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nhead(poly_data, 5)\n\n# A tibble: 5 × 8\n  POLYCLINIC               MANAGED_BY ADDRESS  POSTA…¹      X      Y   Lat  Long\n  <chr>                    <chr>      <chr>      <dbl>  <dbl>  <dbl> <dbl> <dbl>\n1 ANG MO KIO POLYCLINIC    NHG        21 ANG …  569666 29375. 39591.  1.37  104.\n2 BEDOK POLYCLINIC         Singhealth HEARTBE…  469662 38997. 34344.  1.33  104.\n3 BUKIT BATOK POLYCLINIC   NUHS       50 BUKI…  659164 18485. 37125.  1.35  104.\n4 BUKIT MERAH POLYCLINIC   Singhealth 163 BUK…  150163 26192. 29566.  1.28  104.\n5 CHOA CHU KANG POLYCLINIC NUHS       2 TECK …  688846 18814. 40478.  1.38  104.\n# … with abbreviated variable name ¹​POSTAL_CODE\n\n\n\n\n\n\n\nNursing Homes\n\nCodeData\n\n\n\nnursing_data <- read_csv(\"data/aspatial/nursing_home_data_geocoded.csv\")\n\nRows: 76 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): NURSING_HOME_NAME, ADDRESS\ndbl (5): POSTAL_CODE, X, Y, Lat, Long\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nhead(nursing_data, 5)\n\n# A tibble: 5 × 7\n  NURSING_HOME_NAME             ADDRESS        POSTA…¹      X      Y   Lat  Long\n  <chr>                         <chr>            <dbl>  <dbl>  <dbl> <dbl> <dbl>\n1 ALL SAINTS HOME (HOUGANG)     5 Poh Huat Ro…  546703 33636. 38608.  1.37  104.\n2 ALL SAINTS HOME (JURONG EAST) 20 JURONG EAS…  609792 17702. 35990.  1.34  104.\n3 ALL SAINTS HOME (TAMPINES)    11 TAMPINES S…  529123 41443. 38141.  1.36  104.\n4 ALL SAINTS HOME (YISHUN)      551 YISHUN RI…  768681 27662. 46348.  1.44  104.\n5 APEX HARMONY LODGE            10 PASIR RIS …  518240 42573. 39170.  1.37  104.\n# … with abbreviated variable name ¹​POSTAL_CODE\n\n\n\n\n\n\n\nResident Population by Planning Area/Subzone, Age Group and Sex\nOnly total population, not separated by genders\n\nCodeData\n\n\n\npop_data <- read_csv(\"data/aspatial/Resident Population 2015.csv\", skip=11)[1:379,1:19]\n\nNew names:\nRows: 401 Columns: 59\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(58): ...1, Total...2, 0 - 4...3, 5 - 9...4, 10 - 14...5, 15 - 19...6, 2... lgl\n(1): ...59\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n• `Total` -> `Total...2`\n• `0 - 4` -> `0 - 4...3`\n• `5 - 9` -> `5 - 9...4`\n• `10 - 14` -> `10 - 14...5`\n• `15 - 19` -> `15 - 19...6`\n• `20 - 24` -> `20 - 24...7`\n• `25 - 29` -> `25 - 29...8`\n• `30 - 34` -> `30 - 34...9`\n• `35 - 39` -> `35 - 39...10`\n• `40 - 44` -> `40 - 44...11`\n• `45 - 49` -> `45 - 49...12`\n• `50 - 54` -> `50 - 54...13`\n• `55 - 59` -> `55 - 59...14`\n• `60 - 64` -> `60 - 64...15`\n• `65 - 69` -> `65 - 69...16`\n• `70 - 74` -> `70 - 74...17`\n• `75 - 79` -> `75 - 79...18`\n• `80 - 84` -> `80 - 84...19`\n• `85 & Over` -> `85 & Over...20`\n• `Total` -> `Total...21`\n• `0 - 4` -> `0 - 4...22`\n• `5 - 9` -> `5 - 9...23`\n• `10 - 14` -> `10 - 14...24`\n• `15 - 19` -> `15 - 19...25`\n• `20 - 24` -> `20 - 24...26`\n• `25 - 29` -> `25 - 29...27`\n• `30 - 34` -> `30 - 34...28`\n• `35 - 39` -> `35 - 39...29`\n• `40 - 44` -> `40 - 44...30`\n• `45 - 49` -> `45 - 49...31`\n• `50 - 54` -> `50 - 54...32`\n• `55 - 59` -> `55 - 59...33`\n• `60 - 64` -> `60 - 64...34`\n• `65 - 69` -> `65 - 69...35`\n• `70 - 74` -> `70 - 74...36`\n• `75 - 79` -> `75 - 79...37`\n• `80 - 84` -> `80 - 84...38`\n• `85 & Over` -> `85 & Over...39`\n• `Total` -> `Total...40`\n• `0 - 4` -> `0 - 4...41`\n• `5 - 9` -> `5 - 9...42`\n• `10 - 14` -> `10 - 14...43`\n• `15 - 19` -> `15 - 19...44`\n• `20 - 24` -> `20 - 24...45`\n• `25 - 29` -> `25 - 29...46`\n• `30 - 34` -> `30 - 34...47`\n• `35 - 39` -> `35 - 39...48`\n• `40 - 44` -> `40 - 44...49`\n• `45 - 49` -> `45 - 49...50`\n• `50 - 54` -> `50 - 54...51`\n• `55 - 59` -> `55 - 59...52`\n• `60 - 64` -> `60 - 64...53`\n• `65 - 69` -> `65 - 69...54`\n• `70 - 74` -> `70 - 74...55`\n• `75 - 79` -> `75 - 79...56`\n• `80 - 84` -> `80 - 84...57`\n• `85 & Over` -> `85 & Over...58`\n• `` -> `...59`\n\n\n\n\n\nhead(pop_data, 5)\n\n# A tibble: 5 × 19\n  ...1   Total…¹ 0 - 4…² 5 - 9…³ 10 - …⁴ 15 - …⁵ 20 - …⁶ 25 - …⁷ 30 - …⁸ 35 - …⁹\n  <chr>  <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>  \n1 Total  3902690 183580  204450  214390  242900  264130  271030  290620  301070 \n2 Ang M… 174770  6790    7660    8290    9320    10310   11170   12250   13070  \n3 Ang M… 5020    260     280     320     280     260     310     370     420    \n4 Cheng… 29770   1290    1180    1290    1400    1570    1830    2490    2490   \n5 Chong… 27900   910     1100    1180    1370    1520    1800    1980    2100   \n# … with 9 more variables: `40 - 44...11` <chr>, `45 - 49...12` <chr>,\n#   `50 - 54...13` <chr>, `55 - 59...14` <chr>, `60 - 64...15` <chr>,\n#   `65 - 69...16` <chr>, `70 - 74...17` <chr>, `75 - 79...18` <chr>,\n#   `80 - 84...19` <chr>, and abbreviated variable names ¹​Total...2,\n#   ²​`0 - 4...3`, ³​`5 - 9...4`, ⁴​`10 - 14...5`, ⁵​`15 - 19...6`, ⁶​`20 - 24...7`,\n#   ⁷​`25 - 29...8`, ⁸​`30 - 34...9`, ⁹​`35 - 39...10`"
  },
  {
    "objectID": "posts/data_cleaning/index.html#geospatial-data",
    "href": "posts/data_cleaning/index.html#geospatial-data",
    "title": "Data Cleaning",
    "section": "Geospatial Data",
    "text": "Geospatial Data\n\nMaster Plan Subzone 2019\n\nCodeData\n\n\n\nmpsz <- st_read(dsn = \"data/geospatial/MPSZ-2019\", \n                            layer = \"MPSZ-2019\") %>% \n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\deadline2359\\IS415-Project\\posts\\data_cleaning\\data\\geospatial\\MPSZ-2019' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n\n\nhead(mpsz, 5)\n\nSimple feature collection with 5 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 8012.578 ymin: 22108.68 xmax: 33316.59 ymax: 31087.61\nProjected CRS: SVY21 / Singapore TM\n                SUBZONE_N SUBZONE_C      PLN_AREA_N PLN_AREA_C       REGION_N\n1             MARINA EAST    MESZ01     MARINA EAST         ME CENTRAL REGION\n2        INSTITUTION HILL    RVSZ05    RIVER VALLEY         RV CENTRAL REGION\n3          ROBERTSON QUAY    SRSZ01 SINGAPORE RIVER         SR CENTRAL REGION\n4 JURONG ISLAND AND BUKOM    WISZ01 WESTERN ISLANDS         WI    WEST REGION\n5            FORT CANNING    MUSZ02          MUSEUM         MU CENTRAL REGION\n  REGION_C                       geometry\n1       CR MULTIPOLYGON (((33222.98 29...\n2       CR MULTIPOLYGON (((28481.45 30...\n3       CR MULTIPOLYGON (((28087.34 30...\n4       WR MULTIPOLYGON (((14557.7 304...\n5       CR MULTIPOLYGON (((29542.53 31...\n\n\n\n\n\n\n\nLocations of Bus Stops\n\nCodeData\n\n\n\nbusstop_sf <- st_read(dsn = \"data/geospatial/BusStop_Feb2023\", \n                            layer = \"BusStop\") %>% \n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `C:\\deadline2359\\IS415-Project\\posts\\data_cleaning\\data\\geospatial\\BusStop_Feb2023' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5159 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\n\n\nhead(busstop_sf, 5)\n\nSimple feature collection with 5 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 13228.59 ymin: 30391.85 xmax: 41603.76 ymax: 44206.38\nProjected CRS: SVY21 / Singapore TM\n  BUS_STOP_N BUS_ROOF_N             LOC_DESC                  geometry\n1      22069        B06   OPP CEVA LOGISTICS POINT (13576.31 32883.65)\n2      32071        B23         AFT TRACK 13 POINT (13228.59 44206.38)\n3      44331        B01              BLK 239  POINT (21045.1 40242.08)\n4      96081        B05 GRACE INDEPENDENT CH POINT (41603.76 35413.11)\n5      11561        B05              BLK 166 POINT (24568.74 30391.85)\n\n\n\n\n\n\n\nLocations of Train Stations\n\nCodeData\n\n\n\ntrainstation_sf <- st_read(dsn = \"data/geospatial/TrainStation_Feb2023\", \n                            layer = \"RapidTransitSystemStation\")[,c(-1, -2)] %>% \n  st_transform(crs = 3414)\n\nReading layer `RapidTransitSystemStation' from data source \n  `C:\\deadline2359\\IS415-Project\\posts\\data_cleaning\\data\\geospatial\\TrainStation_Feb2023' \n  using driver `ESRI Shapefile'\n\n\nWarning in CPL_read_ogr(dsn, layer, query, as.character(options), quiet, : GDAL\nMessage 1: Non closed ring detected. To avoid accepting it, set the\nOGR_GEOMETRY_ACCEPT_UNCLOSED_RING configuration option to NO\n\n\nSimple feature collection with 220 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 6068.209 ymin: 27478.44 xmax: 45377.5 ymax: 47913.58\nProjected CRS: SVY21\n\n\n\n\n\nhead(trainstation_sf, 5)\n\nSimple feature collection with 5 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 29286.74 ymin: 30548.91 xmax: 34623.54 ymax: 33404.47\nProjected CRS: SVY21 / Singapore TM\n  TYP_CD_DES              STN_NAM_DE                       geometry\n1        MRT   ESPLANADE MRT STATION POLYGON ((30566.07 30621.21...\n2        MRT  PAYA LEBAR MRT STATION POLYGON ((34495.6 33384.44,...\n3        MRT DHOBY GHAUT MRT STATION POLYGON ((29293.51 31312.53...\n4        MRT      DAKOTA MRT STATION POLYGON ((34055.08 32290.62...\n5        MRT    LAVENDER MRT STATION POLYGON ((31236.5 32085.76,..."
  },
  {
    "objectID": "posts/data_cleaning/index.html#retrieve-geospatial-data",
    "href": "posts/data_cleaning/index.html#retrieve-geospatial-data",
    "title": "Data Cleaning",
    "section": "Retrieve Geospatial Data",
    "text": "Retrieve Geospatial Data\n\nGeneral Practitioner Clinics\n\nCodeData\n\n\n\ngp_sf <- st_as_sf(gp_data, coords=c(\"Long\", \"Lat\"), crs=4326) %>% st_transform(crs = 3414)\n\n\n\n\nhead(gp_sf, 5)\n\nSimple feature collection with 5 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 24374.75 ymin: 28496.49 xmax: 33880.65 ymax: 33642.63\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 5 × 5\n  clinic                 postal_code      X      Y            geometry\n  <chr>                  <chr>        <dbl>  <dbl>         <POINT [m]>\n1 RafflesMedical         159953      24849. 30114.    (24849.49 30114)\n2 Shenton Medical Group  119963      24433. 28496. (24432.59 28496.49)\n3 Town Hall Clinic       119967      24375. 28917. (24374.75 28916.52)\n4 Chuah Clinic & Surgery 380113      33881. 33643. (33880.65 33642.63)\n5 ECM Clinic & Surgery   387604      33518. 33021. (33518.21 33021.09)\n\n\n\n\n\n\n\nHospitals\n\nCodeData\n\n\n\nhospital_sf <- st_as_sf(hospital_data, coords=c(\"Long\", \"Lat\"), crs=4326) %>% st_transform(crs = 3414)\n\n\n\n\nhead(hospital_sf, 5)\n\nSimple feature collection with 5 features and 9 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 24230.14 ymin: 30059.55 xmax: 40784.33 ymax: 39338.44\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 5 × 10\n  HOSPITAL_NAME      PRIVATE TYPE  MANAG…¹ ADDRESS POSTA…² NUM_O…³      X      Y\n  <chr>              <chr>   <chr> <chr>   <chr>     <dbl> <chr>    <dbl>  <dbl>\n1 ALEXANDRA HOSPITAL Y       GENE… <NA>    ALEXAN…  159964 176     24230. 30060.\n2 BRIGHT VISION HOS… N       COMM… SINGHE… 5 LORO…  547530 317     32976. 39338.\n3 CHANGI GENERAL HO… N       GENE… SINGHE… 2 SIME…  529889 1,000   40784. 35942.\n4 CONCORD INTERNATI… Y       SPEC… <NA>    19 Ada…  289891 34      25774. 34337.\n5 FARRER PARK HOSPI… Y       GENE… <NA>    1 Farr…  217562 121     30284. 32783.\n# … with 1 more variable: geometry <POINT [m]>, and abbreviated variable names\n#   ¹​MANAGED_BY, ²​POSTAL_CODE, ³​NUM_OF_BEDS\n\n\n\n\n\n\n\nPolyclinics\n\nCodeData\n\n\n\npoly_sf <- st_as_sf(poly_data, coords=c(\"Long\", \"Lat\"), crs=4326) %>% st_transform(crs = 3414)\n\n\n\n\nhead(poly_sf, 5)\n\nSimple feature collection with 5 features and 6 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 18485.22 ymin: 29566.29 xmax: 38996.66 ymax: 40477.96\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 5 × 7\n  POLYCLINIC     MANAG…¹ ADDRESS POSTA…²      X      Y            geometry\n  <chr>          <chr>   <chr>     <dbl>  <dbl>  <dbl>         <POINT [m]>\n1 ANG MO KIO PO… NHG     21 ANG…  569666 29375. 39591. (29375.43 39591.35)\n2 BEDOK POLYCLI… Singhe… HEARTB…  469662 38997. 34344. (38996.66 34343.66)\n3 BUKIT BATOK P… NUHS    50 BUK…  659164 18485. 37125. (18485.22 37124.65)\n4 BUKIT MERAH P… Singhe… 163 BU…  150163 26192. 29566. (26191.96 29566.29)\n5 CHOA CHU KANG… NUHS    2 TECK…  688846 18814. 40478. (18814.15 40477.96)\n# … with abbreviated variable names ¹​MANAGED_BY, ²​POSTAL_CODE\n\n\n\n\n\n\n\nNursing Homes\n\nCodeData\n\n\n\nnursing_sf <- st_as_sf(nursing_data, coords=c(\"Long\", \"Lat\"), crs=4326) %>% st_transform(crs = 3414)\n\n\n\n\nhead(nursing_sf, 5)\n\nSimple feature collection with 5 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 17702.24 ymin: 35989.84 xmax: 42573.31 ymax: 46347.74\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 5 × 6\n  NURSING_HOME_NAME      ADDRESS POSTA…¹      X      Y            geometry\n  <chr>                  <chr>     <dbl>  <dbl>  <dbl>         <POINT [m]>\n1 ALL SAINTS HOME (HOUG… 5 Poh …  546703 33636. 38608.  (33635.6 38608.27)\n2 ALL SAINTS HOME (JURO… 20 JUR…  609792 17702. 35990. (17702.24 35989.84)\n3 ALL SAINTS HOME (TAMP… 11 TAM…  529123 41443. 38141. (41443.41 38141.06)\n4 ALL SAINTS HOME (YISH… 551 YI…  768681 27662. 46348. (27662.47 46347.74)\n5 APEX HARMONY LODGE     10 PAS…  518240 42573. 39170.  (42573.31 39170.3)\n# … with abbreviated variable name ¹​POSTAL_CODE"
  },
  {
    "objectID": "posts/data_cleaning/index.html#general-practitioner-clinics-2",
    "href": "posts/data_cleaning/index.html#general-practitioner-clinics-2",
    "title": "Data Cleaning",
    "section": "General Practitioner Clinics",
    "text": "General Practitioner Clinics\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(total_pop) +\n  tm_polygons(\n    \"Total...2\",\n    style = \"cont\",\n    alpha = 0.4) +\n  tm_fill() + \ntm_shape(gp_sf) + \n  tm_symbols(shape=24,\n    col  = \"blue\",\n    size = 0.15) +\n  tm_layout(main.title=\"General Practitioner Clinics\",\n            main.title.position = \"center\")\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "posts/data_cleaning/index.html#hospitals-2",
    "href": "posts/data_cleaning/index.html#hospitals-2",
    "title": "Data Cleaning",
    "section": "Hospitals",
    "text": "Hospitals\n\ngeneral_hospital = hospital_sf[hospital_sf$TYPE == \"GENERAL\",]\nspecialised_hospital = hospital_sf[hospital_sf$TYPE == \"SPECIALISED\",]\ncommunity_hospital = hospital_sf[hospital_sf$TYPE == \"COMMUNITY\",]\n\n\ntm_shape(total_pop) +\n  tm_polygons(\n    \"Total...2\",\n    style = \"cont\",\n    alpha = 0.4) +\ntm_shape(general_hospital) + \n  tm_symbols(\n    shape=23,\n    col  = \"red\",\n    size = 0.15) +\ntm_shape(specialised_hospital) + \n  tm_symbols(\n    shape=23,\n    col  = \"blue\",\n    size = 0.15) +\ntm_shape(community_hospital) + \n  tm_symbols(\n    shape=23,\n    col  = \"green\",\n    size = 0.15) +\n  tm_layout(main.title=\"Hospitals\",\n            main.title.position = \"center\")"
  },
  {
    "objectID": "posts/data_cleaning/index.html#polyclinics-2",
    "href": "posts/data_cleaning/index.html#polyclinics-2",
    "title": "Data Cleaning",
    "section": "Polyclinics",
    "text": "Polyclinics\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(total_pop) +\n  tm_polygons(\n    \"Total...2\",\n    style = \"cont\",\n    alpha = 0.4) +\ntm_shape(poly_sf) + \n  tm_symbols(shape=22,\n    col  = \"orange\",\n    size = 0.15) +\n  tm_layout(main.title=\"Polyclinics\",\n            main.title.position = \"center\")"
  },
  {
    "objectID": "posts/data_cleaning/index.html#nursing-homes-2",
    "href": "posts/data_cleaning/index.html#nursing-homes-2",
    "title": "Data Cleaning",
    "section": "Nursing Homes",
    "text": "Nursing Homes\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(total_pop) +\n  tm_polygons(\n    \"Total...2\",\n    style = \"cont\",\n    alpha = 0.4) +\ntm_shape(nursing_sf) + \n  tm_symbols(shape=21,\n    col  = \"green\",\n    size = 0.15) +\n  tm_layout(main.title=\"Nursing Homes\",\n            main.title.position = \"center\")"
  },
  {
    "objectID": "posts/data_cleaning/index.html#merge-mpsz-with-population-data",
    "href": "posts/data_cleaning/index.html#merge-mpsz-with-population-data",
    "title": "Data Cleaning",
    "section": "Merge MPSZ with Population Data",
    "text": "Merge MPSZ with Population Data\n\nConvert Data Types\n\npop_is_char <- sapply(pop_data[c(2:19)], is.character)\npop_data[c(2:19)][ , pop_is_char] <- as.data.frame(apply(pop_data[c(2:19)][ , pop_is_char], 2, as.numeric))\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\nWarning in apply(pop_data[c(2:19)][, pop_is_char], 2, as.numeric): NAs\nintroduced by coercion\n\n\n\n\nTotal Population\n\npop_data$...1  = toupper(pop_data$...1)\n\ntotal_pop <- merge(x = mpsz, y = pop_data, by.x = \"SUBZONE_N\", by.y = \"...1\", all.x = TRUE)"
  },
  {
    "objectID": "posts/data_cleaning/index.html#validity-of-geometries-of-sds",
    "href": "posts/data_cleaning/index.html#validity-of-geometries-of-sds",
    "title": "Data Cleaning",
    "section": "Validity of Geometries of sds",
    "text": "Validity of Geometries of sds\n\nlength(which(st_is_valid(trainstation_sf) == FALSE))\n\n[1] 2\n\n\nmake valid cannot do\n\ntrainstation_sf <- trainstation_sf[st_is_valid(trainstation_sf) == TRUE,]\ntrainstation_sf <- trainstation_sf[!st_is_empty(trainstation_sf),,drop=FALSE]\nlength(which(st_is_valid(trainstation_sf) == FALSE))\n\n[1] 0"
  },
  {
    "objectID": "posts/data_cleaning/index.html#bus-stops",
    "href": "posts/data_cleaning/index.html#bus-stops",
    "title": "Data Cleaning",
    "section": "Bus Stops",
    "text": "Bus Stops\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(total_pop) +\n  tm_polygons(\n    \"Total...2\",\n    style = \"cont\",\n    alpha = 0.4) +\ntm_shape(busstop_sf) + \n  tm_symbols(shape=20,\n    col  = \"darkblue\",\n    size = 0.15) +\n  tm_layout(main.title=\"Bus Stops\",\n            main.title.position = \"center\")"
  },
  {
    "objectID": "posts/data_cleaning/index.html#mrt-stations",
    "href": "posts/data_cleaning/index.html#mrt-stations",
    "title": "Data Cleaning",
    "section": "MRT Stations",
    "text": "MRT Stations\n\nmrt <- trainstation_sf[trainstation_sf$TYP_CD_DES == \"MRT\",]\nlrt <- trainstation_sf[trainstation_sf$TYP_CD_DES == \"LRT\",]\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(total_pop) +\n  tm_polygons(\n    \"Total...2\",\n    style = \"cont\",\n    alpha = 0.4) +\ntm_shape(mrt) + \n  tm_symbols(shape=20,\n    col  = \"green\",\n    size = 0.15) +\ntm_shape(lrt) + \n  tm_symbols(shape=20,\n    col  = \"darkgreen\",\n    size = 0.15) +\n  tm_layout(main.title=\"Train Stations\",\n            main.title.position = \"center\")"
  },
  {
    "objectID": "posts/data_cleaning/data/geospatial/MPSZ-2019/MPSZ-2019.html",
    "href": "posts/data_cleaning/data/geospatial/MPSZ-2019/MPSZ-2019.html",
    "title": "IS415-Project",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "posts/data_cleaning/index.html#validity-of-geometries-of-train-stations",
    "href": "posts/data_cleaning/index.html#validity-of-geometries-of-train-stations",
    "title": "Data Cleaning",
    "section": "Validity of Geometries of Train Stations",
    "text": "Validity of Geometries of Train Stations\n\nlength(which(st_is_valid(trainstation_sf) == FALSE))\n\n[1] 2\n\n\nmake valid cannot do\n\ntrainstation_sf <- trainstation_sf[st_is_valid(trainstation_sf) == TRUE,]\ntrainstation_sf <- trainstation_sf[!st_is_empty(trainstation_sf),,drop=FALSE]\nlength(which(st_is_valid(trainstation_sf) == FALSE))\n\n[1] 0"
  },
  {
    "objectID": "posts/data_cleaning/index.html#excluding-unnecessary-data-points",
    "href": "posts/data_cleaning/index.html#excluding-unnecessary-data-points",
    "title": "Data Cleaning",
    "section": "Excluding Unnecessary Data Points",
    "text": "Excluding Unnecessary Data Points\n\ngp_sf <- st_intersection(mpsz, gp_sf)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\nhospital_sf <- st_intersection(mpsz, hospital_sf)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\npoly_sf <- st_intersection(mpsz, poly_sf)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\nnursing_sf <- st_intersection(mpsz, nursing_sf)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\nbusstop_sf <- st_intersection(mpsz, busstop_sf)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\ntrainstation_sf <- st_intersection(mpsz, trainstation_sf)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries"
  },
  {
    "objectID": "posts/data_cleaning/index.html#conversion-of-datatypes",
    "href": "posts/data_cleaning/index.html#conversion-of-datatypes",
    "title": "Data Cleaning",
    "section": "Conversion of Datatypes",
    "text": "Conversion of Datatypes\nidk why train stations converts into spatial polygon\n\nConverting sf data frames to sp’s *Spatial** class\n\nmpsz_spatial <- as_Spatial(mpsz)\ngp_spatial <- as_Spatial(gp_sf)\nhospital_spatial <- as_Spatial(hospital_sf)\npoly_spatial <- as_Spatial(poly_sf)\nnursing_spatial <- as_Spatial(nursing_sf)\nbusstop_spatial <- as_Spatial(busstop_sf)\ntrainstation_spatial <- as_Spatial(trainstation_sf)\n\n\n\nConverting sp’s *Spatial** Class into Generic sp Format\n\nmpsz_sp <- as(mpsz_spatial, \"SpatialPolygons\")\ngp_sp <- as(gp_spatial, \"SpatialPoints\")\nhospital_sp <- as(hospital_spatial, \"SpatialPoints\")\npoly_sp <- as(poly_spatial, \"SpatialPoints\")\nnursing_sp <- as(nursing_spatial, \"SpatialPoints\")\nbusstop_sp <- as(busstop_spatial, \"SpatialPoints\")\ntrainstation_sp <- as(trainstation_spatial, \"SpatialPolygons\")\n\n\n\nConverting Generic sp Format into spatstat’s ppp Format\n\ngp_ppp <- as(gp_sp, \"ppp\")\nhospital_ppp <- as(hospital_sp, \"ppp\")\npoly_ppp <- as(poly_sp, \"ppp\")\nnursing_ppp <- as(nursing_sp, \"ppp\")\nbusstop_ppp <- as(busstop_sp, \"ppp\")\n\n\n\nData Visualisation\n\nMaster Plan Subzone 2019General Practitioner ClinicsHospitalsPolyclinicsNursing HomesBus StopsMrt Stations\n\n\n\nplot(mpsz_spatial, main=\"General Practitioner Clinics\")\n\n\n\n\n\n\n\nplot(gp_ppp, main=\"General Practitioner Clinics\")\n\n\n\n\n\n\n\nplot(hospital_ppp, main=\"Hospitals\")\n\n\n\n\n\n\n\nplot(poly_ppp, main=\"Polyclinics\")\n\n\n\n\n\n\n\nplot(nursing_ppp, main=\"Nursing Homes\")\n\n\n\n\n\n\n\nplot(busstop_ppp, main=\"Bus Stops\")\n\n\n\n\n\n\n\nplot(trainstation_spatial, main=\"Mrt Stations\")"
  },
  {
    "objectID": "posts/data_cleaning/index.html#check-for-duplicate-data-points",
    "href": "posts/data_cleaning/index.html#check-for-duplicate-data-points",
    "title": "Data Cleaning",
    "section": "Check for Duplicate Data Points",
    "text": "Check for Duplicate Data Points\n\nany(duplicated(gp_ppp))\n\n[1] TRUE\n\n\n\nany(duplicated(hospital_ppp))\n\n[1] FALSE\n\n\n\nany(duplicated(poly_ppp))\n\n[1] FALSE\n\n\n\nany(duplicated(nursing_ppp))\n\n[1] TRUE\n\n\n\nany(duplicated(busstop_ppp))\n\n[1] TRUE\n\n\n\nHandle Duplicated Points\nIf we want to know how many locations have more than one point event, we can use the code chunk below.\n\nsum(multiplicity(gp_ppp) > 1)\n\n[1] 554\n\n\n\nsum(multiplicity(nursing_ppp) > 1)\n\n[1] 4\n\n\n\nsum(multiplicity(busstop_ppp) > 1)\n\n[1] 2\n\n\nThe second solution is use jittering, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.\n\ngp_ppp_jit <- rjitter(gp_ppp,retry = TRUE,\n                             nsim = 1, \n                             drop = TRUE)\nany(duplicated(gp_ppp_jit))\n\n[1] FALSE\n\n\n\nnursing_ppp_jit <- rjitter(nursing_ppp,retry = TRUE,\n                             nsim = 1, \n                             drop = TRUE)\nany(duplicated(nursing_ppp_jit))\n\n[1] FALSE\n\n\n\nbusstop_ppp_jit <- rjitter(busstop_ppp,retry = TRUE,\n                             nsim = 1, \n                             drop = TRUE)\nany(duplicated(busstop_ppp_jit))\n\n[1] FALSE"
  },
  {
    "objectID": "posts/data_cleaning/index.html#creating-owin-object",
    "href": "posts/data_cleaning/index.html#creating-owin-object",
    "title": "Data Cleaning",
    "section": "Creating owin Object",
    "text": "Creating owin Object\n\nmpsz_owin <- as(mpsz_sp, \"owin\")\ngp_ppp = gp_ppp_jit[mpsz_owin]\nhospital_ppp = hospital_ppp[mpsz_owin]\npoly_ppp = poly_ppp[mpsz_owin]\nnursing_ppp = nursing_ppp_jit[mpsz_owin]\nbusstop_ppp = busstop_ppp_jit[mpsz_owin]\nmpsz_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [2667.54, 56396.44] x [15748.72, 50256.33] units"
  },
  {
    "objectID": "posts/data_cleaning/index.html#kernel-density-estimation-kde",
    "href": "posts/data_cleaning/index.html#kernel-density-estimation-kde",
    "title": "Data Cleaning",
    "section": "Kernel Density Estimation (KDE)",
    "text": "Kernel Density Estimation (KDE)\nrescale\n\ngp_ppp.km <- rescale(gp_ppp, 1000, \"km\")\nhospital_ppp.km <- rescale(hospital_ppp, 1000, \"km\")\npoly_ppp.km <- rescale(poly_ppp, 1000, \"km\")\nnursing_ppp.km <- rescale(nursing_ppp, 1000, \"km\")\nbusstop_ppp.km <- rescale(busstop_ppp, 1000, \"km\")\n\n\nGeneral Practitioner Clinics\n\ngp_bw <- density(gp_ppp.km,\n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\")\n\nplot(gp_bw, main = \"General Practitioner Clinics\")\n\n\n\n\n\n\nHospitals\n\nhospital_bw <- density(hospital_ppp.km,\n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\")\n\nplot(hospital_bw, main = \"Hospitals\")\n\n\n\n\n\n\nPolyclinics\n\npoly_bw <- density(poly_ppp.km,\n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\")\n\nplot(poly_bw, main = \"Polyclinics\")\n\n\n\n\n\n\nNursing Homes\n\nnursing_bw <- density(nursing_ppp.km,\n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\")\n\nplot(nursing_bw, main = \"Nursing Homes\")\n\n\n\n\n\n\nBus Stops\n\nbusstop_bw <- density(busstop_ppp.km,\n             sigma = bw.diggle,\n             edge = TRUE,\n             kernel = \"gaussian\")\n\nplot(busstop_bw, main = \"Bus Stops\")"
  },
  {
    "objectID": "posts/data_cleaning/index.html#converting-kde-output-into-grid-object",
    "href": "posts/data_cleaning/index.html#converting-kde-output-into-grid-object",
    "title": "Data Cleaning",
    "section": "Converting KDE Output into Grid Object",
    "text": "Converting KDE Output into Grid Object\n\nGeneral Practitioner Clinics\n\ngridded_gp_bw <- as.SpatialGridDataFrame.im(gp_bw)\nspplot(gridded_gp_bw)\n\n\n\n\n\n\nHospitals\n\ngridded_hospital_bw <- as.SpatialGridDataFrame.im(hospital_bw)\nspplot(gridded_hospital_bw)\n\n\n\n\n\n\nPolyclinics\n\ngridded_poly_bw <- as.SpatialGridDataFrame.im(poly_bw)\nspplot(gridded_poly_bw)\n\n\n\n\n\n\nNursing Homes\n\ngridded_nursing_bw <- as.SpatialGridDataFrame.im(nursing_bw)\nspplot(gridded_nursing_bw)\n\n\n\n\n\n\nBus Stops\n\ngridded_busstop_bw <- as.SpatialGridDataFrame.im(busstop_bw)\nspplot(gridded_busstop_bw)"
  },
  {
    "objectID": "posts/data_cleaning/index.html#converting-gridded-output-into-raster",
    "href": "posts/data_cleaning/index.html#converting-gridded-output-into-raster",
    "title": "Data Cleaning",
    "section": "Converting Gridded Output into Raster",
    "text": "Converting Gridded Output into Raster\n\nGeneral Practitioner Clinics\n\nkde_gp_bw_raster <- raster(gridded_gp_bw)\nprojection(kde_gp_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_gp_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.419757, 0.2695907  (x, y)\nextent     : 2.667538, 56.39644, 15.74872, 50.25633  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : -1.967462e-14, 106.0357  (min, max)\n\n\n\n\nHospitals\n\nkde_hospital_bw_raster <- raster(gridded_hospital_bw)\nprojection(kde_hospital_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_hospital_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.419757, 0.2695907  (x, y)\nextent     : 2.667538, 56.39644, 15.74872, 50.25633  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : -6.617214e-17, 0.6530283  (min, max)\n\n\n\n\nPolyclinics\n\nkde_poly_bw_raster <- raster(gridded_poly_bw)\nprojection(kde_poly_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_poly_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.419757, 0.2695907  (x, y)\nextent     : 2.667538, 56.39644, 15.74872, 50.25633  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : 1.253552e-17, 0.1114663  (min, max)\n\n\n\n\nNursing Homes\n\nkde_nursing_bw_raster <- raster(gridded_nursing_bw)\nprojection(kde_nursing_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_nursing_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.419757, 0.2695907  (x, y)\nextent     : 2.667538, 56.39644, 15.74872, 50.25633  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : -1.746062e-16, 0.8532225  (min, max)\n\n\n\n\nBus Stops\n\nkde_busstop_bw_raster <- raster(gridded_busstop_bw)\nprojection(kde_busstop_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_busstop_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.419757, 0.2695907  (x, y)\nextent     : 2.667538, 56.39644, 15.74872, 50.25633  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : -1.085599e-14, 46.77302  (min, max)\n\n\n\n\nVisualisation\n\nGeneral Practitioner Clinics\n\ntm_shape(kde_gp_bw_raster) +\n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\nVariable(s) \"v\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nHospitals\n\ntm_shape(kde_hospital_bw_raster) +\n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\nVariable(s) \"v\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nPolyclinics\n\ntm_shape(kde_poly_bw_raster) +\n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\nNursing Homes\n\ntm_shape(kde_nursing_bw_raster) +\n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\nVariable(s) \"v\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nBus Stops\n\ntm_shape(kde_busstop_bw_raster) +\n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\nVariable(s) \"v\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "posts/data_cleaning/index.html#nearest-neighbour-analysis",
    "href": "posts/data_cleaning/index.html#nearest-neighbour-analysis",
    "title": "Data Cleaning",
    "section": "Nearest Neighbour Analysis",
    "text": "Nearest Neighbour Analysis\n\nGeneral Practitioner Clinics\n\nHo = The distribution of general practitioner clinics are randomly distributed.\nH1 = The distribution of general practitioner clinics are not randomly distributed.\n\nWith the p-value lower than the alpha value of 0.05, we reject the null hypothesis and accept that general practitioner clinics are not randomly distributed.\n\nclarkevans.test(gp_ppp.km,\n                correction = \"none\", \n                clipregion = \"mpsz_owin\", \n                alternative = c(\"clustered\"), \n                nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  gp_ppp.km\nR = 0.34551, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\n\n\nHospitals\n\nHo = The distribution of hospitals are randomly distributed.\nH1 = The distribution of hospitals are not randomly distributed.\n\nWith the p-value lower than the alpha value of 0.05, we reject the null hypothesis and accept that hospitals are not randomly distributed.\n\nclarkevans.test(hospital_ppp.km,\n                correction = \"none\", \n                clipregion = \"mpsz_owin\", \n                alternative = c(\"clustered\"), \n                nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  hospital_ppp.km\nR = 0.45977, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\n\n\nPolyclinics\n\nHo = The distribution of polyclinics are randomly distributed.\nH1 = The distribution of polyclinics are not randomly distributed.\n\nWith the p-value above than the alpha value of 0.05, we accept the null hypothesis and accept that polyclinics are randomly distributed.\n\nclarkevans.test(poly_ppp.km,\n                correction = \"none\", \n                clipregion = \"mpsz_owin\", \n                alternative = c(\"clustered\"), \n                nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  poly_ppp.km\nR = 1.0189, p-value = 0.09\nalternative hypothesis: clustered (R < 1)\n\n\n\n\nNursing Homes\n\nHo = The distribution of nursing homes are randomly distributed.\nH1 = The distribution of nursing homes are not randomly distributed.\n\nWith the p-value lower than the alpha value of 0.05, we reject the null hypothesis and accept that nursing homes are not randomly distributed.\n\nclarkevans.test(nursing_ppp.km,\n                correction = \"none\", \n                clipregion = \"mpsz_owin\", \n                alternative = c(\"clustered\"), \n                nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  nursing_ppp.km\nR = 0.70478, p-value = 0.01\nalternative hypothesis: clustered (R < 1)"
  }
]